name: Remove inactive Docker images and tags
description: Remove Docker images and tags inactive since at least 1 month

inputs:
  docker_org:
    description: "Docker registry (i.e. Docker Hub) organization"
    default: "jahia"
  docker_repository:
    description: "Docker registry (i.e. Docker Hub) repository"
    required: true
  docker_username:
    description: "Docker registry (i.e. Docker Hub) username"
    default: ""
    required: true
  docker_delete_token:
    description: "Docker registry (i.e. Docker Hub) token. Requires read/write/delete access"
    required: true
  dry_run:
    description: "Dry Run: Does not push changes if true"
    default: true

runs:
  using: "composite"
  steps:
    - name: Remove inactive images with DockerHub API
      shell: bash
      run: |
        TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${{ inputs.docker_username }}'", "password": "'${{ inputs.docker_delete_token }}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
        echo "Identifying and deleting images which are older than 1 months in ${{ inputs.docker_org }}/${{ inputs.docker_repository }}"
        echo
        COUNT=$(curl -s -H "Authorization: JWT ${TOKEN}" "https://hub.docker.com/v2/namespaces/${{ inputs.docker_org }}/repositories/${{ inputs.docker_repository }}/images/?status=inactive&currently_tagged=false" | jq '.count')
        echo "Number of inactive images: ${COUNT}"
        echo
        PAGES=$(( ${COUNT}/25 ))
        URL="https://hub.docker.com/v2/namespaces/${{ inputs.docker_org }}/repositories/${{ inputs.docker_repository }}/images/?status=inactive&currently_tagged=false&page_size=25"
        p=1
        while [[ ${p} -le ${PAGES} ]]; do
          echo "Current iteration: ${p} / ${PAGES}"
          IMAGES=$(curl -s -H "Authorization: JWT ${TOKEN}" ${URL} | jq '.results|.[]|.digest')
          for d in ${IMAGES}
          do
            echo
            echo "Current image being stored: ${d}"
            echo '{"repository": "'${{ inputs.docker_repository }}'", "digest": '${d}'},' >> tmp.txt
          done
          echo -n $(tr -d "\n\r" < tmp.txt) > manifests.txt
          sed -i '$ s/.$//' manifests.txt
          echo '{"dry_run": ${{ inputs.dry_run }}, "manifests": ['$(cat manifests.txt)']}' | curl -H "Authorization: JWT ${TOKEN}" -H "Content-Type: application/json" -X POST -d @- "https://hub.docker.com/v2/namespaces/${{ inputs.docker_org }}/delete-images"
          p=$(( p+1 ))
          : > tmp.txt
        done

    - name: Remove inactive tags with DockerHub API
      shell: bash
      run: |
        TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${{ inputs.docker_username }}'", "password": "'${{ inputs.docker_delete_token }}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
        echo "Identifying and deleting tags which are older than 1 months in ${{ inputs.docker_org }}/${{ inputs.docker_repository }}"
        echo
        COUNT=$(curl -s -H "Authorization: JWT ${TOKEN}" "https://hub.docker.com/v2/namespaces/${{ inputs.docker_org }}/repositories/${{ inputs.docker_repository }}/images/?status=inactive&currently_tagged=true" | jq '.count')
        echo "Number of inactive and currently tagged images: ${COUNT}"
        echo
        PAGES=$(( ${COUNT}/25 ))
        URL="https://hub.docker.com/v2/namespaces/${{ inputs.docker_org }}/repositories/${{ inputs.docker_repository }}/images/?status=inactive&currently_tagged=true&page_size=25"
        p=1
        while [[ ${p} -le ${PAGES} ]]; do
          echo "Current iteration: ${p} / ${PAGES}"
          IMAGES=$(curl -s -H "Authorization: JWT ${TOKEN}" ${URL} | jq '.results|.[]|.digest')
          for d in ${IMAGES}
          do
            echo
            echo "Current image being stored: ${d}"
            echo '{"repository": "'${{ inputs.docker_repository }}'", "digest": '${d}'},' >> tmp.txt
            TAG_URL="https://hub.docker.com/v2/namespaces/${{ inputs.docker_org }}/repositories/${{ inputs.docker_repository }}/images/"$(eval echo ${d})"/tags"
            TAGS=$(curl -s -H "Authorization: JWT ${TOKEN}" -H "Content-Type: application/json" "${TAG_URL}" | jq '.results|.[]|.tag')
            echo '{"repository": "'${{ inputs.docker_repository }}'", "digest": '${d}', "warning": "current_tag", "tags": [' >> tmp_tags.txt
            for t in ${TAGS}
            do
              echo "Current tag being stored: ${t}"
              echo ${t}',' >> tmp_tags.txt
            done
            sed -i '$ s/.$//' tmp_tags.txt
            echo ']},' >> tmp_tags.txt
          done
          echo -n $(tr -d "\n\r" < tmp.txt) > manifests.txt
          echo -n $(tr -d "\n\r" < tmp_tags.txt) > ignore_warnings.txt
          sed -i '$ s/.$//' manifests.txt
          sed -i '$ s/.$//' ignore_warnings.txt
          echo '{"dry_run": ${{ inputs.dry_run }}, "manifests": ['$(cat manifests.txt)'], "ignore_warnings": ['$(cat ignore_warnings.txt)']}' | curl -s -H "Authorization: JWT ${TOKEN}" -H "Content-Type: application/json" -X POST -d @- "https://hub.docker.com/v2/namespaces/${{ inputs.docker_org }}/delete-images"
          p=$(( p+1 ))
          : > tmp.txt
          : > tmp_tags.txt
        done
