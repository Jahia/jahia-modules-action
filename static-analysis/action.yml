name: Static Analysis
description: Performs static code analysis (linters, security)

inputs:
  primary_release_branch:
    description: 'Primary release branch'
    default: 'main'
  module_path:
    description: 'Path to the module'
    default: './'
  tests_path:
    description: 'Path to the module'
    default: 'tests/'
  max_warning:
    description: 'Maximum number of warning before failing the linting step'
    default: '1'
  auditci_level:
    description: 'Security level to check against for the module codebase, will fail the step if higher'
    default: 'moderate'
  auditci_level_tests:
    description: 'Security level to check against for the tests codebase, will fail the step if higher'
    default: 'critical'
  node_version:
    description: 'Version of node to install on the host'
    default: 'lts/*'
  yarn_version:
    description: 'Version of Yarn to use for module'
    required: false
  yarn_test_version:
    description: 'Version of Yarn to use for tests in module'
    required: false
  skip_lint_modules:
    description: skip linter for modules when set to true
    type: boolean
    default: false
  skip_lint_tests:
    description: skip linter for tests when set to true
    type: boolean
    default: false
  skip_vulns_modules:
    description: skip Audit-ci for modules when set to true
    type: boolean
    default: false
  skip_vulns_tests:
    description: skip Audit-ci for tests when set to true
    type: boolean
    default: true

runs:
  using: "composite"
  steps:
    - uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node_version }}

    # Java projects
    - name: Restore Maven repository cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.m2/repository
          /root/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Checkstyle (Maven)
      shell: bash
      run: |
        if [[ -e "${{ inputs.module_path }}pom.xml" ]]; then
          echo "Running Maven Checkstyle"
          cd ${{ inputs.module_path }}
        mvn checkstyle:check -Dcheckstyle.config.location=https://raw.githubusercontent.com/Jahia/jahia-modules-action/add-checkstyle-to-static-analysis/static-analysis/checkstyle_configuration.xml
        fi

    # Install node dependencies
    - name: Run yarn if package.json exists in module folder
      shell: bash
      run: |
        echo "::group::Run yarn if package.json exists in module folder: ${{ inputs.module_path }}"
        if [[ -d "${{ inputs.module_path }}" && -e "${{ inputs.module_path }}package.json" ]]; then
          cd ${{ inputs.module_path }}
          if [[ -n "${{ inputs.yarn_version }}" ]]; then
            yarn set version ${{ inputs.yarn_version }}
          fi
          yarn
        fi
        echo "::endgroup::"
    - name: Run yarn if package.json exists in tests folder
      shell: bash
      run: |
        echo "::group::Run yarn if package.json exists in tests folder: ${{ inputs.tests_path }}"
        if [[ -d "${{ inputs.tests_path }}" && -e "${{ inputs.tests_path }}package.json" ]]; then
          cd ${{ inputs.tests_path }}
          if [[ -n "${{ inputs.yarn_tests_version }}" ]]; then
            yarn set version ${{ inputs.yarn_tests_version }}
          fi
          yarn
        fi
        echo "::endgroup::"

    # Lint the codebase
    - name: Lint module (javascript only)
      if: ${{ inputs.skip_lint_modules == 'false' }}
      shell: bash
      run: |
        echo "Lint module (javascript only)"      
        if [[ -d "${{ inputs.module_path }}" && -e "${{ inputs.module_path }}package.json" ]]; then
          cd ${{ inputs.module_path }}
          yarn run lint --max-warnings ${{ inputs.max_warning }}
        fi
    - name: Lint tests (javascript only)
      if: ${{ inputs.skip_lint_tests == 'false' }}
      shell: bash
      run: |
        echo "Lint tests (javascript only)"
        if [[ -d "${{ inputs.tests_path }}" && -e "${{ inputs.tests_path }}package.json" ]]; then
          cd ${{ inputs.tests_path }}
          yarn run lint --max-warnings ${{ inputs.max_warning }}
        fi

    # Runs the security checks
    - name: Install audit-ci
      shell: bash
      run: |
        echo "::group::Install audit-ci"     
        echo "Install audit-ci"
        sudo npm install -g audit-ci
        echo "::endgroup::"
    - name: Audit-ci module (javascript only)
      if: ${{ inputs.skip_vulns_modules == 'false' }}
      shell: bash
      run: |
        echo "Scan javascript vulnerabilities in the module with audit-ci"
        if [[ -d "${{ inputs.module_path }}" && -e "${{ inputs.module_path }}package.json" ]]; then
          cd ${{ inputs.module_path }}
          audit-ci --skip-dev --${{ inputs.auditci_level }}
        fi
    - name: Audit-ci tests (javascript only)
      if: ${{ inputs.skip_vulns_tests == 'false' }}
      shell: bash
      run: |
        echo "Scan javascript vulnerabilities in the tests with audit-ci"
        if [[ -d "${{ inputs.tests_path }}" && -e "${{ inputs.tests_path }}package.json" ]]; then
          cd ${{ inputs.tests_path }}
          audit-ci --${{ inputs.auditci_level_tests }}
        fi
        echo "::endgroup::"

