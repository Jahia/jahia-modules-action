name: Build
description: Build a Jahia module

inputs:
  module_id:
    description: Module ID
    required: true
  mvn_settings_filepath:
    description: Filepath to the settings.xml file
    default: '.github/maven.settings.xml'
    required: false
  nexus_username:
    description: 'Nexus Username'
    required: false
    default: ''
  nexus_password:
    description: 'Nexus Password'
    required: false
    default: ''
  debug_session_timeout:
    description: 'In seconds, timeout in seconds before terminating the session'
    required: false
    default: '7200'
  github_artifact_retention:
    description: 'Time during which artifact are kept in Github infrastructure'
    required: false
    default: '2'
  tests_module_path:
    description: 'Path to a folder in the repository containing a tests module to be built'
    required: false
    default: 'tests/jahia-module/'    

runs:
  using: 'composite'
  steps:
    - name: Set environment variables from parameters
      shell: bash
      run: |
        echo "NEXUS_USERNAME=${{ inputs.nexus_username }}" >> $GITHUB_ENV
        echo "NEXUS_PASSWORD=${{ inputs.nexus_password }}" >> $GITHUB_ENV

    # This step save the maven cache between runs
    # More details can be found here: https://docs.github.com/en/actions/advanced-guides/caching-dependencies-to-speed-up-workflows
    - name: Cache local Maven repository
      uses: actions/cache@v3
      with:
        path: |
          ~/.m2/repository
          /root/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Build package
      shell: bash
      run: mvn -B -U -ntp -s ${{ inputs.mvn_settings_filepath }} clean install

    - name: Copy dependencies to provision artifacts
      shell: bash
      run: mvn -B -s ${{ inputs.mvn_settings_filepath }} dependency:copy-dependencies -DexcludeTransitive=true -DincludeScope=provided -DincludeGroupIds=org.jahia.modules -DincludeTypes=jar

    - name: Check if test module is present
      id: check_test_module
      uses: andstor/file-existence-action@v2
      with:
        files: "${{ inputs.tests_module_path }}pom.xml"

    - name: Build tests package
      shell: bash
      if: steps.check_test_module.outputs.files_exists == 'true'
      run: |
        cd ${{ inputs.tests_module_path }}
        echo "Building test module"
        ls -lah ${{ github.workspace }}/
        mvn -B -U -ntp -s ${{ github.workspace }}/${{ inputs.mvn_settings_filepath }} clean install

    - name: Prepare artifacts
      shell: bash
      run: |
        mkdir /tmp/artifacts/
        find . -type f -path '*/target/*-SNAPSHOT*.jar' -exec cp '{}' /tmp/artifacts/ ';' || :
        if [ -f target/*source-release.zip ]; then
          echo "A source file is present, copying it to the artifacts folder"
          cp target/*source-release.zip /tmp/artifacts/ || :
        fi
        if [ -d ${{ inputs.module_id }}/ ]; then
          echo "Copying jar from: ${{ inputs.module_id }}/"
          cp ${{ inputs.module_id }}/target/*.jar /tmp/artifacts/ || :
          if [ ! -d target/ ]; then
            mkdir target/
          fi
          cp ${{ inputs.module_id }}/target/*.jar target/ || :
        fi
        if [ "${{ steps.check_test_module.outputs.files_exists }}" == "true" ]; then
          cd ${{ inputs.tests_module_path }}
          find . -type f -path '*/target/*-SNAPSHOT*.jar' -exec cp '{}' /tmp/artifacts/ ';' || :
        fi
        echo "Displaying the content of /tmp/artifacts"
        ls -lah /tmp/artifacts

    - name: Archive build artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          target/*
          ./*/target/*
        retention-days: ${{ inputs.github_artifact_retention }}

    - name: Keep session opened if /tmp/debug file is present
      shell: bash
      if: always()
      run: |
        echo "::group::Keep session opened if /tmp/debug file is present"
        WAIT_DURATION=0
        while [[ -e /tmp/debug ]]; do
          echo "Debug file present - $(( ++ WAIT_DURATION ))s - waiting for file removal..."
          if [ $WAIT_DURATION -gt ${{ inputs.debug_session_timeout }} ]; then
            echo "Reached timeout of: ${{ inputs.debug_session_timeout }}"
            echo "Exiting the loop"
            break
          fi
          sleep 1;
        done
        echo "::endgroup::"
