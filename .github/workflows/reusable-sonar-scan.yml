# Note: re-usable workflows must be in the .github/workflows folder, amongst other workflows dedicated
# to the jahia-modules-action repository. Thus using "reusable-" prefix to easily identify them.
name: Sonar Analysis

on:
  workflow_call:
    inputs:
      module_id:
        type: string
        required: true
      mvn_settings_filepath:
        type: string
        description: Filepath to the settings.xml file
        default: '.github/maven.settings.xml'
        required: false
      job_container:
        type: string
        required: false
        default: "jahia/cimg-mvn-cache:ga_cimg_openjdk_8.0.312-node"
      git_branch:
        type: string
        required: false
        default: "main"
      github_slug:
        type: string
        description: 'GitHub SLUG of the module (for example: jahia/sandbox)'
      java_distribution:
        type: string
        required: false
        default: "zulu"
      java_version:
        type: string
        required: false
        default: "11.0.19"
      tests_module_type:
        type: string
        required: false
        default: "mvn"
      incident_service:
        type: string
        description: 'Service subject to the incident. If empty, will default to the value of module_id'
        required: false
        default: ''

jobs:
  sonar-analysis:
    name: Sonar Analysis
    runs-on: self-hosted
    outputs:
      status: ${{ steps.status.outputs.status }}
    env:
      NEXUS_INTERNAL_URL: ${{ secrets.NEXUS_INTERNAL_URL }}
    container:
      image: ${{ inputs.job_container }}
      credentials:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_branch }}
      - uses: actions/setup-java@v4
        with:
          distribution: ${{ inputs.java_distribution }}
          java-version: ${{ inputs.java_version }}
      - uses: jahia/jahia-modules-action/build@v2
        with:
          tests_module_type: ${{ inputs.tests_module_type }}
          mvn_settings_filepath: ${{ inputs.mvn_settings_filepath }}
          nexus_username: ${{ secrets.NEXUS_USERNAME }}
          nexus_password: ${{ secrets.NEXUS_PASSWORD }}
      - name: Set default values
        id: vars
        run: echo "github_repo=${{ github.repository }}" >> $GITHUB_OUTPUT
      - uses: jahia/jahia-modules-action/sonar-analysis@v2
        with:
          primary_release_branch: ${{ inputs.git_branch }}
          build_artifacts: ''
          github_pr_id: ${{github.event.number}}
          sonar_url: ${{ secrets.SONAR_URL }}
          sonar_token: ${{ secrets.SONAR_TOKEN }}
          nvd_apikey: ${{ secrets.NVD_APIKEY }}
          mvn_settings_filepath: ${{ inputs.mvn_settings_filepath }}
          nexus_username: ${{ secrets.NEXUS_USERNAME }}
          nexus_password: ${{ secrets.NEXUS_PASSWORD }}
          github_slug: ${{ inputs.github_slug || steps.vars.outputs.github_repo }}
      - id: status
        name: Prepare the status message for pagerduty
        if: always()
        shell: bash
        run: |
          JR_STATUS=""
          if [[ ${{ job.status }} == "failure" ]]; then
            JR_STATUS="There was a failure when executing the SonarQube analysis for the module ${{ inputs.module_id }}"
          fi        
          echo "status=${JR_STATUS}" >> $GITHUB_OUTPUT

  # Always use the pagerduty job, either to:
  # - report on success and don't send a notification
  # - report on failure and send a notification
  pagerduty:
    runs-on: ubuntu-latest
    needs: [sonar-analysis]
    if: always()
    steps:
      - name: Generate build messages
        shell: bash
        run: |
          JR_FORCE_SUCCESS="--forceSuccess"
          JR_MESSAGE="SonarQube analysis was successful"
          if [[ "${{ needs.sonar-analysis.outputs.status }}" != "" ]]; then
            JR_MESSAGE="${{ needs.sonar-analysis.outputs.status }}"
            JR_FORCE_SUCCESS=""
          fi          
          echo "JR_FORCE_SUCCESS=${JR_FORCE_SUCCESS}" >> $GITHUB_ENV
          echo "JR_MESSAGE=${JR_MESSAGE}" >> $GITHUB_ENV

      # If incident_service is not provided, fallback to module_id
      - name: Define the service to use for the notification
        shell: bash
        run: |
          INCIDENT_SERVICE=${{ inputs.incident_service }}
          if [[ "${{ inputs.incident_service }}" == "" ]]; then
            INCIDENT_SERVICE="${{ inputs.module_id }}"
          fi          
          echo "INCIDENT_SERVICE=${INCIDENT_SERVICE}" >> $GITHUB_ENV

      - name: Install jahia-reporter and report to Pagerduty
        shell: bash
        run: |
          echo "JR_FORCE_SUCCESS=${{ env.JR_FORCE_SUCCESS}}"
          echo "JR_MESSAGE=${{ env.JR_MESSAGE}}"
          npm install -g @jahia/jahia-reporter@latest
          jahia-reporter pagerduty:incident \
            --incidentMessage="${{ env.JR_MESSAGE}}" \
            ${{ env.JR_FORCE_SUCCESS}} \
            --pdApiKey=${{ secrets.INCIDENT_PAGERDUTY_API_KEY }} \
            --pdReporterEmail=${{ secrets.INCIDENT_PAGERDUTY_REPORTER_EMAIL }} \
            --pdReporterId=${{ secrets.INCIDENT_PAGERDUTY_REPORTER_ID }} \
            --pdTwoStepsAssign \
            --googleSpreadsheetId=${{ secrets.INCIDENT_GOOGLE_SPREADSHEET_ID }} \
            --googleClientEmail=${{ secrets.INCIDENT_GOOGLE_CLIENT_EMAIL }} \
            --googleApiKey=${{ secrets.INCIDENT_GOOGLE_PRIVATE_KEY_BASE64 }} \
            --googleUpdateState \
            --service=${{ env.INCIDENT_SERVICE}} \
            --sourceUrl=${{ env.GITHUB_SERVER_URL }}/${{ env.GITHUB_REPOSITORY }}/actions/runs/${{ env.GITHUB_RUN_ID }}
