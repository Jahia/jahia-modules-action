name: Sonar Analysis
description: Analyze the code with SonarQube

inputs:
  primary_release_branch:
    description: Name of the primary release branch (master, main, ...)
    required: false
    default: main
  github_slug:
    description: 'GitHub SLUG of the module (for example: jahia/sandbox)'
  sonar_url:
    description: 'URL to the SONAR server'
    required: true
  sonar_token:
    description: 'Authentication token for the SONAR server'
    required: true
  github_pr_id:
    description: 'ID of the pull request (for example: 5)'
    required: false
    default: ''
  mvn_settings_filepath:
    description: Filepath to the settings.xml file
    required: false
    default: '.github/maven.settings.xml'
  nexus_username:
    description: 'Nexus Username'
    required: false
    default: ''
  nexus_password:
    description: 'Nexus Password'
    required: false
    default: ''
  build_artifacts:
    description: 'Name of the artifact target folder that was saved from build stage (using upload-artifact)'
    required: false
    default: 'build-artifacts'
  java_distribution:
    description: 'Name of the Java distribution to load and use'
    required: false
    default: 'temurin'
  java_version:
    description: 'Version of Java to load and use for the analysis'
    required: false
    default: '11'
  nvd_apikey:
    description: 'NVD API Key to download vulnerability database'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - uses: actions/setup-java@v4
      with:
        distribution: ${{ inputs.java_distribution }}
        java-version: ${{ inputs.java_version }}

    - name: Set environment variables from parameters
      shell: bash
      run: |
        echo "NEXUS_USERNAME=${{ inputs.nexus_username }}" >> $GITHUB_ENV
        echo "NEXUS_PASSWORD=${{ inputs.nexus_password }}" >> $GITHUB_ENV

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      if: ${{ inputs.build_artifacts != '' }}
      with:
        name: ${{ inputs.build_artifacts }}

    - name: Generate Cache Key Seeds
      shell: bash
      run: |
        find . -name 'pom.xml' | sort | xargs cat > maven_cache_seed
        if [[ ! -z "${{ inputs.github_pr_id }}" ]]; then
          echo "true" > is_pr
        else
          echo "false" > is_pr
        fi

    - name: Set environment variables from parameters
      shell: bash
      run: |
        echo "SONAR_URL=${{ inputs.sonar_url }}" >> $GITHUB_ENV
        echo "SONAR_TOKEN=${{ inputs.sonar_token }}" >> $GITHUB_ENV

    - name: Displaying important variables
      shell: bash
      run: |
        echo "github_pr_id = ${{ inputs.github_pr_id }}"

    - name: Cache local Maven repository
      uses: actions/cache@v4
      with:
        path: |
          ~/.owasp/dependency-check-data
          ~/.sonar/cache
        key: v3-sonar-owasp-dependencies-{{ checksum "is_pr" }}
        restore-keys: |
          v3-sonar-owasp-dependencies-{{ checksum "is_pr" }}

    - name: Setup Sonar env variables
      shell: bash
      run: |
        echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
        echo "github_slug=${{ inputs.github_slug || github.repository }}" >> $GITHUB_OUTPUT
      id: vars

    - name: Display variable values
      shell: bash
      run: |
        echo "BRANCH: ${{ steps.vars.outputs.branch }}"
        echo "GITHUB_SLUG: ${{ steps.vars.outputs.github_slug }}"
        echo "GITHUB_REF: ${GITHUB_REF}"

    - name: Set common Sonar parameters
      shell: bash
      run: |
        export SONAR_PARAMS="-DfailBuildOnCVSS=7 -DskipProvidedScope=true -DskipTestScope=true -DskipSystemScope=true -Dformats=HTML,JSON \
          -Dsonar.dependencyCheck.jsonReportPath=target/dependency-check-report.json \
          -Dsonar.dependencyCheck.htmlReportPath=target/dependency-check-report.html \
          -DretireJsAnalyzerEnabled=false -DnodeAnalyzerEnabled=false -DassemblyAnalyzerEnabled=false -DnodeAuditSkipDevDependencies=true \
          -DsuppressionFiles=https://raw.githubusercontent.com/Jahia/jahia/master/.owasp/suppressions.xml \
          -DyarnAuditAnalyzerEnabled=false \
          -DdataDirectory=~/.owasp/dependency-check-data ${{ (inputs.nvd_apikey != '' && '-DnvdApiKey=') || '' }}${{ inputs.nvd_apikey }}"
        echo "SONAR_PARAMS=${SONAR_PARAMS}" >> $GITHUB_ENV

    - name: Sonar OWASP
      shell: bash
      run: |
        echo "Pull request number: ${{ inputs.github_pr_id }}"
        if [[ ! -z "${{ inputs.github_pr_id }}" ]]; then
          echo "Skipping OWASP for PR analysis"
        else
          echo "Executing an OWASP analysis on branch: ${{ inputs.primary_release_branch }}"
          mvn -B -s ${{ inputs.mvn_settings_filepath }} org.owasp:dependency-check-maven:12.1.6:aggregate \
            $SONAR_PARAMS
        fi

    - name: Sonar Release branch analysis
      shell: bash
      if: ${{ always() }}
      run: |
        echo "Pull request number: ${{ inputs.github_pr_id }}"
        if [[ ! -z "${{ inputs.github_pr_id }}" ]]; then
          echo "Executing a PR based analysis"
          mvn -B -s ${{ inputs.mvn_settings_filepath }} org.sonarsource.scanner.maven:sonar-maven-plugin:5.2.0.4988:sonar \
              -Dsonar.pullrequest.branch=$GITHUB_REF \
              -Dsonar.pullrequest.key=${{ inputs.github_pr_id }} \
              -Dsonar.pullrequest.base=${{ inputs.primary_release_branch }} \
              -Dsonar.pullrequest.github.repository=${{ steps.vars.outputs.github_slug }}
        elif [[ ${{ steps.vars.outputs.branch }} == ${{ inputs.primary_release_branch }} ]]; then
          echo "Executing an analysis on the main branch"
          mvn -B -s ${{ inputs.mvn_settings_filepath }} org.sonarsource.scanner.maven:sonar-maven-plugin:5.2.0.4988:sonar \
            $SONAR_PARAMS
        else
          echo "Executing an analysis on branch: ${{ inputs.primary_release_branch }}"
          mvn -B -s ${{ inputs.mvn_settings_filepath }} org.sonarsource.scanner.maven:sonar-maven-plugin:5.2.0.4988:sonar \
            -Dsonar.branch.name=${{ inputs.primary_release_branch }} \
            $SONAR_PARAMS
        fi
