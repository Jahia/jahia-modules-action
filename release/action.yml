name: Release
description: Release a Jahia module

inputs:
  primary_release_branch:
    description: Name of the primary release branch (master, main, ...)
    default: 'main'
    required: false
  mvn_settings_filepath:
    description: Filepath to the settings.xml file
    default: '.github/maven.settings.xml'
    required: false
  nexus_username:
    description: 'Nexus Username'
    required: true
  nexus_password:
    description: 'Nexus Password'
    required: true
  tests_module_path:
    description: 'Path to a folder in the repository containing a tests module to be built (Both Javascript and MVN test module supported)'
    required: false
    default: 'tests/jahia-module/'
  tests_module_type:
    description: 'Type of module for the tests module (mvn,javascript)'
    required: false
    default: 'mvn'    
  github_slug:
    description: 'GitHub SLUG of the module (for example: jahia/sandbox)'
    required: true
  release_id:
    description: GitHub release ID
    required: true
  release_version:
    description: Version to release
    required: true
  git_user_name:
    description: Git user name
    default: 'Jahia CI'
    required: false
  git_user_email:
    description: Git user email
    default: 'jahia-ci@jahia.com'
    required: false
  github_api_token:
    description: GitHub API token
    required: true
  github_artifact_retention:
    description: 'Time during which artifact are kept in Github infrastructure'
    required: false
    default: '2'
  slack-webhook-qa:
    description: 'Secret webhook to send a notif on a QA channel'
    required: false
  npmjs_publish_token:
    description: 'Token used to publish javascript module (or any kind of npm package) to npmjs.com, typically used when the Maven release process delegates the package publication to npm'
    default: ''
    required: false

runs:
  using: 'composite'
  steps:
    - name: Set environment variables from parameters
      shell: bash
      run: |
        echo "NEXUS_USERNAME=${{ inputs.nexus_username }}" >> $GITHUB_ENV
        echo "NEXUS_PASSWORD=${{ inputs.nexus_password }}" >> $GITHUB_ENV
        echo "NEXUS_RELEASE_USERNAME=${{ inputs.nexus_username }}" >> $GITHUB_ENV
        echo "NEXUS_RELEASE_PASSWORD=${{ inputs.nexus_password }}" >> $GITHUB_ENV
        echo "NEXUS_RELEASE_PASSWORD=${{ inputs.npmjs_publish_token }}" >> $GITHUB_ENV

    - name: Set npmjs.org auth token environment variable from parameter
      if: ${{ inputs.npmjs_publish_token != '' }}
      shell: bash
      run: |
        echo "NODE_AUTH_TOKEN=${{ inputs.npmjs_publish_token }}" >> $GITHUB_ENV

    - name: Setup .npmrc file to publish to npmjs.org
      if: ${{ inputs.npmjs_publish_token != '' }}
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        registry-url: 'https://registry.npmjs.org'

    - name: Setup .yarnrc.yml file to allow publication to https://registry.npmjs.org with a 'yarn npm publish'
      if: ${{ inputs.npmjs_publish_token != '' }}
      shell: bash
      run: |
        echo "npmAuthToken: ${{ inputs.npmjs_publish_token }}" >> ~/.yarnrc.yml

    - name: Generate maven cache seed
      shell: bash
      run: |
        find . -name 'pom.xml' | sort | xargs cat > ./maven_cache_seed

    - name: Cache local Maven repository
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: v1-maven-dependencies-${{ hashFiles('**/maven_cache_seed') }}
        restore-keys: |
          v1-maven-dependencies-${{ hashFiles('**/maven_cache_seed') }}

    - name: Getting latest changes from the remote branch
      shell: bash
      run: |
        git fetch --all
        git pull origin ${{ inputs.primary_release_branch }} --quiet

    - name: Delete github tag ${{ inputs.release_version }}
      shell: bash
      run: |
        git config user.email ${{ inputs.git_user_email }}
        git config user.name ${{ inputs.git_user_name }}
        git tag --delete ${{ inputs.release_version }}
        git push origin :refs/tags/${{ inputs.release_version }}

    - name: Remove any previous changes, this is required by mvn release prepare
      shell: bash
      run: |
        git reset --hard
        git checkout ${{ inputs.primary_release_branch }}

    - name: Added some debug details
      shell: bash
      run: |
        git branch
        echo "---"
        git status
        echo "---"
        git show --summary

    - name: Check if test module is present (MVN)
      if: ${{ inputs.tests_module_type == 'mvn' }}
      id: check_test_module_mvn
      uses: andstor/file-existence-action@v2
      with:
        files: "${{ inputs.tests_module_path }}pom.xml"

    - name: Prepare versioning variables
      id: versions
      shell: bash
      run: |
        TAG_VERSION=$(echo ${{ inputs.release_version }})
        FINAL_RELEASE_VERSION=$(echo ${{ inputs.release_version }} | tr '_' '.' | cut -d'-' -f 1)
        MAJOR_VERSION=`echo $FINAL_RELEASE_VERSION | cut -d. -f1`
        MINOR_VERSION=`echo $FINAL_RELEASE_VERSION | cut -d. -f2`
        REVISION=`echo $FINAL_RELEASE_VERSION | cut -d. -f3`
        if [[ "${{ inputs.primary_release_branch }}" == "master"  || "${{ inputs.primary_release_branch }}" == "main"  ||  "${{ inputs.primary_release_branch }}" =~ ^[0-9]_x$ ]]; then
          NEXT_MINOR_VERSION=`expr $MINOR_VERSION + 1`
          NEXT_DEVELOPMENT_VERSION="$MAJOR_VERSION.$NEXT_MINOR_VERSION.0"-SNAPSHOT
        else
          NEXT_REVISION=`expr $REVISION + 1`
          NEXT_DEVELOPMENT_VERSION="$MAJOR_VERSION.$MINOR_VERSION.$NEXT_REVISION"-SNAPSHOT
        fi
        echo "FINAL_RELEASE_VERSION=${FINAL_RELEASE_VERSION}"
        echo "NEXT_DEVELOPMENT_VERSION=${NEXT_DEVELOPMENT_VERSION}"
        echo "next_development_version=${NEXT_DEVELOPMENT_VERSION}" >> $GITHUB_OUTPUT
        echo "final_release_version=${FINAL_RELEASE_VERSION}" >> $GITHUB_OUTPUT
        echo "tag_version=${TAG_VERSION}" >> $GITHUB_OUTPUT

    - name: Release prepare version for ${{ inputs.release_version }}
      shell: bash
      run: |
        echo "FINAL_RELEASE_VERSION=${{ steps.versions.outputs.final_release_version }}"
        echo "NEXT_DEVELOPMENT_VERSION=${{ steps.versions.outputs.next_development_version }}"
        echo "TAG_VERSION=${{ steps.versions.outputs.tag_version }}"
        if [[ "${{ inputs.tests_module_type }}" == "mvn" && "${{ steps.check_test_module_mvn.outputs.files_exists }}" == "true" ]]; then
          echo "Release prepare for test module"
          cd ${{ inputs.tests_module_path }}
          # We only want to generate one single tag (for both the module and the test module), thus not being able to use release:prepare
          # We need to update the version in the test module, then commit these changes.
          mvn -B -s ${GITHUB_WORKSPACE}/${{ inputs.mvn_settings_filepath }} versions:set -DnewVersion="${{ steps.versions.outputs.final_release_version }}"
          git add .
          git commit -m "[skip ci] [Test module] Update version of the test module to the release"
          git push
          mvn -B -s ${GITHUB_WORKSPACE}/${{ inputs.mvn_settings_filepath }} deploy
        else
          echo "No test module found"
        fi
        cd ${GITHUB_WORKSPACE}
        mvn -B -s ${{ inputs.mvn_settings_filepath }} -B -Dtag=${{ steps.versions.outputs.tag_version }} release:prepare -DreleaseVersion="${{ steps.versions.outputs.final_release_version }}" -DdevelopmentVersion="${{ steps.versions.outputs.next_development_version }}" -DscmCommentPrefix="[skip ci] [maven-release-plugin]"

    - name: Cache local Maven repository
      uses: actions/cache@v4
      with:
        path: |
          pom.xml.releaseBackup
          release.properties
        key: v1-rollback-${{ inputs.release_id }}

    - name: Update github release for id ${{ inputs.release_id }}
      shell: bash
      run: |
        echo "Update github release for id ${{ inputs.release_id }}"
        curl -X PATCH \
        -H "Accept:application/vnd.github.v3+json" \
        -d "{\"tag_name\":\"${{ inputs.release_version }}\", \"prerelease\": false, \"draft\": false}" -u \
        jahia-ci:${{ inputs.github_api_token }} https://api.github.com/repos/${{ inputs.github_slug }}/releases/${{ inputs.release_id }}
        curl \
        -H "Content-Type: $(file -b --mime-type CHANGELOG.md)" \
        -u jahia-ci:${{ inputs.github_api_token }}  \
        --data-binary @CHANGELOG.md \
        "https://uploads.github.com/repos/${{ inputs.github_slug }}/releases/${{ inputs.release_id }}/assets?name=$(basename CHANGELOG.md)"

    - name: Perform release
      shell: bash
      run: | 
        # if [[ "${{ inputs.tests_module_type }}" == "mvn"  &&  "${{ steps.check_test_module_mvn.outputs.files_exists }}" == "true" ]]; then
        #   echo "Perform release for test module"
        #   cd ${{ inputs.tests_module_path }}
        #   mvn -B -s ${GITHUB_WORKSPACE}/${{ inputs.mvn_settings_filepath }} release:perform -Prelease-to-staging-repository
        # else
        #   echo "No test module found"          
        # fi
        # cd ${GITHUB_WORKSPACE}
        mvn -B -s ${{ inputs.mvn_settings_filepath }} release:perform -Prelease-to-staging-repository

    - name: Set development version for the test module (if present)
      shell: bash
      run: | 
        if [[ "${{ inputs.tests_module_type }}" == "mvn" && "${{ steps.check_test_module_mvn.outputs.files_exists }}" == "true" ]]; then
          cd ${{ inputs.tests_module_path }}
          mvn -B -s ${GITHUB_WORKSPACE}/${{ inputs.mvn_settings_filepath }} versions:set -DnewVersion="${{ steps.versions.outputs.next_development_version }}"
          git add .
          git commit -m "[skip ci] [Test module] Update version of the test module to the next development version"
          git push
        else
          echo "No test module found to set development version"
        fi

    - name: Copy artifacts
      shell: bash
      run: |
        mkdir /tmp/artifacts/
        cd ~
        find . -name "*.jar" -type f  -maxdepth 3 -mindepth 3 -exec cp {} /tmp/artifacts/ \;

    - name: Release Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: |
          /tmp/artifacts/
        retention-days: ${{ inputs.github_artifact_retention }}

    - name: Archive SBOM artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: sbom-artifacts
        path: |
          **/target/java-bom*
          **/target/classes/javascript/**/bom/*
          **/target/classes/javascript/cyclonedx/*
          !**/target/checkout/*
        retention-days: ${{ inputs.github_artifact_retention }}

    - name: Post to a Slack channel
      if: ${{ inputs.slack-webhook-qa }}
      uses: slackapi/slack-github-action@v1.23.0
      with:
        payload: |
          {
            "module": "${{ inputs.github_slug }}",
            "version": "${{ inputs.release_version }}"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ inputs.slack-webhook-qa }}
