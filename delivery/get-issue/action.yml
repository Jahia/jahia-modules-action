
name: Get issue
description: Returns details about an issue

inputs:
  github_token:
    description: 'GitHub personal API token'
    required: true

outputs:
  issue_number:
    description: "Issue number"
    value: ${{ fromJSON(steps.get-issue.outputs.result).issueType }}
  issue_type:
    description: "Issue type"
    value: ${{ fromJSON(steps.get-issue.outputs.result).issueNumber }}

runs:
  using: 'composite'
  steps:
    - name: Check if an issue exists
      uses: actions/github-script@v7
      id: get-issue
      with:
        github-token: ${{ inputs.github_token }}
        retries: 3
        script: |
          const githubIssueId = context.payload.issue.node_id
          const githubIssueNode = await github.graphql(`
            query issue($issueId: ID!) {
              node(id: $issueId) {
                ... on Issue {
                  id
                  number
                  issueType {
                    id
                    name
                  }
                }
              }
            }
            `,
            { 
              issueId: githubIssueId, 
              // See doc about issue types: https://github.com/orgs/community/discussions/139933
              headers: {
                'GraphQL-Features': 'issue_types'
              }
            }            
          ).catch(error => {
            core.info(`Could not find the issue with ID: ${githubIssueId}, message: ${error.message}`);          
          })
          
          core.debug(JSON.stringify(githubIssueNode))

          return {
            issueNumber: githubIssueNode?.node?.number ?? '',
            issueType: githubIssueNode?.node?.issueType?.name ?? ''
          }

    - name: Display output from the previous step
      shell: bash
      run: |
        echo "JSON Output: ${{ steps.get-issue.outputs.result }}"
        echo "issueType: ${{ fromJSON(steps.get-issue.outputs.result).issueType }}"
        echo "issueNumber: ${{ fromJSON(steps.get-issue.outputs.result).issueNumber }}"
