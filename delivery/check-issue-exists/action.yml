name: Check issue exists
description: Checks if an issue exist

inputs:
  github_token:
    description: 'GitHub personal API token'
    required: true

outputs:
  result:
    description: "Issue number"
    value: ${{ steps.get-issue-number.outputs.result }}

runs:
  using: 'composite'
  steps:
    - name: Check if an issue exists
      uses: actions/github-script@v7
      id: get-issue-number
      with:
        github-token: ${{ inputs.github_token }}
        result-encoding: string
        retries: 3
        script: |
          const githubIssueId = context.payload.issue.node_id
          const githubIssueNode = await github.graphql(`
            query issue($issueId: ID!) {
              node(id: $issueId) {
                ... on Issue {
                  id
                  number
                }
              }
            }
            `,
            { issueId: githubIssueId}
          ).catch(error => {
            core.info(`Error "${error.message}" while trying to find the issue with ID: ${githubIssueId}`);          
          })
          
          if (githubIssueNode === undefined) {
            core.info(`Unable to find an issue with ID: ${githubIssueId}`)
            return ""
          }

          core.info(`An issue with ID: ${githubIssueId} exists`)
          return githubIssueNode.node.number

    - name: Display issue number
      shell: bash
      run: echo "${{ steps.get-issue-number.outputs.result }}"