name: Integration tests
description: Runs Jahia integration tests on an Ubuntu server

inputs:
  module_id:
    description: 'Module ID'
    required: true
  primary_release_branch:
    description: 'Primary release branch'
    required: false
    default: 'main'
  nexus_username:
    description: 'Nexus Username'
    required: true
  nexus_password:
    description: 'Nexus Password'
    required: true
  docker_username:
    description: 'Docker login username'
    required: true
  docker_password:
    description: 'Docker login password'
    required: true
  docker_compose_file:
    description: 'Filename for docker-compose yaml file'
    required: false
    default: 'docker-compose.yml'
  tests_path:
    description: 'Folder containing the docker-compose.yml'
    required: false
    default: 'tests/'
  tests_manifest:
    description: 'Manifest contraining the provisioning script'
    required: true
  jahia_image:
    description: 'Full name of a Jahia image (org/repo:tag)'
    required: false
    default: 'jahia/jahia-discovery-dev:8-SNAPSHOT'
  jahia_superuser_password:
    description: 'Jahia root password'
    required: false
    default: 'root1234'
  jahia_cluster_enabled:
    description: 'Run Jahia in cluster mode'
    required: false
    default: 'false'
  tests_image:
    description: 'Full name of the Tests image (org/repo:tag)'
    required: false
    default: 'module-tests'
  tests_container_name:
    description: 'Name of the tests container in the docker-compose file'
    required: false
    default: 'cypress'
  tests_container_branch:
    description: 'Branch containing the tests (if different from current)'
    required: false
    default: ''
  jahia_license:
    description: 'Base64 encoded Jahia license'
    required: false
    default: ''
  jcustomer_image:
    description: 'Full name a JCustomer image (org/repo:tag)'
    required: false
    default: ''
  elasticsearch_image:
    description: 'Full name of an Elasticsearch image (org/repo:tag)'
    required: false
    default: ''
  should_skip_artifacts:
    description: 'Should build artifacts be copied in the test container ?'
    required: false
    default: 'false'
  should_skip_testrail:
    description: 'Should the submission to Testrail be skipped ?'
    required: false
    default: 'true'
  should_skip_notifications:
    description: 'Should slack notifications be skipped ?'
    required: false
    default: 'true'
  slack_channel_id_notifications:
    description: 'Channel id to be used for failure notifications'
    required: false
    default: ''    
  slack_channel_id_notifications_all:
    description: 'Channel id to be used for all notifications (failure and success)'
    required: false
    default: ''
  slack_client_token:
    description: 'The slack token used to post the messages'
    required: false
    default: ''
  slack_webhook_notifications:
    description: 'Webhook to be used for failure notifications'
    required: false
    default: ''
  slack_webhook_notifications_all:
    description: 'Webhook to be used for all notifications (failure and success)'
    required: false
    default: ''
  should_use_build_artifacts:
    description: 'Should the job attempt to download previously built artifacts'
    required: false
    default: 'true'
  should_skip_zencrepes:
    description: 'Should zencrepes notifications be skipped ?'
    required: false
    default: 'false'
  should_build_testsimage:
    description: 'Should the orb attend to build the test image ?'
    required: false
    default: 'true'
  zencrepes_secret:
    description: 'ZenCrepes Webhook secret'
    required: false
    default: ''
  incident_pagerduty_api_key:
    description: 'Pageduty API key to create incidents'
    required: false
    default: ''
  incident_pagerduty_reporter_email:
    description: 'Pageduty Reporter email to create incident. That email must correspond to a valid user in the PagerDuty tenant'
    required: false
    default: ''
  incident_pagerduty_reporter_id:
    description: 'Pageduty Reporter id to create incident. This user will first be assigned to the ticket when --pdTwoStepsAssign is provided'
    required: false
    default: ''
  incident_google_spreadsheet_id:
    description: 'Google Spreadsheet ID of the spreadsheet containing the incident mapping'
    required: false
    default: ''
  incident_google_client_email:
    description: 'Google Client email to allow access to Google API'
    required: false
    default: ''
  incident_google_api_key_base64:
    description: 'Google base64 encoded private key to allow access to Google API'
    required: false
    default: ''
  testrail_project:
    description: 'Testrail Project to send data to'
    required: false
    default: 'Default'    
  testrail_milestone:
    description: 'Milestone to be used when submitting the results to Testrail'
    required: false
    default: 'Default'
  testrail_username:
    description: 'Testrail Username'
    required: false
    default: ''
  testrail_password:
    description: 'Testrail Password'
    required: false
    default: ''
  ci_startup_script:
    description: 'Startup script to use in-lieu of docker-compose up'
    required: false
    default: 'ci.startup.sh'
  ci_postrun_script:
    description: 'Script to run prior to saving the artifacts'
    required: false
    default: 'ci.postrun.sh'
  node_version:
    description: 'Version of node to install on the host'
    required: false
    default: 'lts/*'
  debug_session_timeout:
    description: 'In seconds, timeout in seconds before terminating the session'
    required: false
    default: '7200'

runs:
  using: "composite"
  steps:
    - uses: actions/setup-node@v2
      with:
        node-version: ${{ inputs.node_version }}

    - name: Install @jahia/jahia-reporter
      shell: bash
      run: | 
        npm install -g @jahia/jahia-reporter

    # Download the artifacts that were saved at build time.
    - name: Download a single artifact
      if: ${{ inputs.should_use_build_artifacts == 'true' }}
      uses: actions/download-artifact@v2
      with:
        name: build-artifacts

    - name: List current directory [TO BE REMOVED]
      shell: bash
      run: | 
        ls -lah
        echo "---"
        if [ -d target/ ]; then
          ls -lah target/
        fi

    # Set the environment variables necessary for the docker-compose run
    # These are declared here to avoid having to repeat in multiple steps
    - name: Set environment variables from parameters
      shell: bash
      run: |
        echo "MANIFEST=${{ inputs.tests_manifest }}" >> $GITHUB_ENV
        echo "JAHIA_IMAGE=${{ inputs.jahia_image }}" >> $GITHUB_ENV
        echo "JAHIA_LICENSE=${{ inputs.jahia_license }}" >> $GITHUB_ENV
        echo "JAHIA_CLUSTER_ENABLED=${{ inputs.jahia_cluster_enabled }}" >> $GITHUB_ENV
        echo "TESTS_IMAGE=${{ inputs.tests_image }}" >> $GITHUB_ENV
        echo "JCUSTOMER_IMAGE=${{ inputs.jcustomer_image }}" >> $GITHUB_ENV
        echo "ELASTICSEARCH_IMAGE=${{ inputs.elasticsearch_image }}" >> $GITHUB_ENV
        echo "NEXUS_USERNAME=${{ inputs.nexus_username }}" >> $GITHUB_ENV
        echo "NEXUS_PASSWORD=${{ inputs.nexus_PASSWORD }}" >> $GITHUB_ENV

    - name: Display important versions and environment variables
      shell: bash
      run: |
        echo "node -v: $(node -v)"
        echo "npm -v: $(npm -v)"
        echo "jahia-reporter -v: $(jahia-reporter -v)"
        echo "Displaying important environment variables"
        echo "MANIFEST=${MANIFEST}"
        echo "JAHIA_IMAGE=${JAHIA_IMAGE}"
        echo "TESTS_IMAGE=${TESTS_IMAGE}"
        echo "JCUSTOMER_IMAGE=${JCUSTOMER_IMAGE}"
        echo "ELASTICSEARCH_IMAGE=${ELASTICSEARCH_IMAGE}"
        echo "Current branch is: GITHUB_REF=${GITHUB_REF}"

    - name: Prepare export folder
      shell: bash
      run: |
        mkdir -p ${{ inputs.tests_path }}artifacts
  
    # Login to the docker registry is needed to access some images (snapshots, ...)
    - name: Docker login
      shell: bash
      run: echo "${{ inputs.docker_password }}" | docker login -u "${{ inputs.docker_username }}" --password-stdin

    - name: Preparing build artifacts
      shell: bash
      run: |
        if [ ${{ inputs.should_skip_artifacts }} == false ]; then
          find . -type f -path '*/target/*-SNAPSHOT.jar' -exec cp '{}' ${{ inputs.tests_path }}artifacts/ ';' || :
          if [ -d ./build-dependencies/ ]; then
            mkdir -p ${{ inputs.tests_path }}artifacts/build-dependencies
            cp ./build-dependencies/* ${{ inputs.tests_path }}artifacts/build-dependencies/
            echo "Content of build-dependencies"
            ls -lah ${{ inputs.tests_path }}artifacts/build-dependencies/
          fi
          ls -lah ${{ inputs.tests_path }}artifacts
        fi   

    # We always build the test container from scratch
    # Docker layer caching makes this quick if it was already previously built
    # To test a previous release, a specific branch can be provided      
    - name: Build the tests image
      shell: bash
      run: |
        if [ ${{ inputs.should_build_testsimage }} == true ]; then
          cd ${{ inputs.tests_path }}
          if [[ "${{ inputs.tests_container_branch }}" != "" ]]; then
            git checkout ${{ inputs.tests_container_branch }}
          fi
          docker build -t ${{ inputs.tests_image }} .
          docker save -o tests_image.tar ${{ inputs.tests_image }}
        fi    

    # Pull the latest version of ${JAHIA_IMAGE}  
    - name: Pull the latest version of Jahia and print docker images cache to console
      shell: bash
      run: |
        cd ${{ inputs.tests_path }}
        . ./set-env.sh
        echo "List of docker images in local cache PRIOR pull" > ./artifacts/docker.log
        docker images --digests --all 2>&1 | tee -a ./artifacts/docker.log
        echo "--------------------------------------------------" >> ./artifacts/docker.log
        docker pull ${JAHIA_IMAGE}
        echo "List of docker images in local cache AFTER pull" >> ./artifacts/docker.log
        docker images --digests --all 2>&1 | tee -a ./artifacts/docker.log
        echo "--------------------------------------------------" >> ./artifacts/docker.log  

    # Run a background task to display the running containers and their hash
    # This is used to verify that the right containers are running
    # Sleep 30s to give containers time to start
    # - run: |
    #     cd ${{ inputs.tests_path >>
    #     sleep 30
    #     docker ps --all --no-trunc 2>&1 | tee -a ./artifacts/docker.log
    #   shell: bash 

    # Using abort-on-container-exit will exit on first container failure, which
    # for us will be the test container
    - name: Spin-up the containers
      shell: bash  
      run: |
        cd ${{ inputs.tests_path }}
        export DOCKER_CLIENT_TIMEOUT=120
        export COMPOSE_HTTP_TIMEOUT=120
        . ./set-env.sh
        if [[ -f "${{ inputs.ci_startup_script }}" ]]; then
          echo "Startup script is present"
          bash ${{ inputs.ci_startup_script }}
        else
          docker-compose -f ${{ inputs.docker_compose_file }} up --abort-on-container-exit
        fi

    - name: Export containers artifacts (reports, secreenshots, videos)
      shell: bash
      if: always()
      run: |
        cd ${{ inputs.tests_path }}
        docker cp ${{ inputs.tests_container_name }}:/home/jahians/results ./artifacts

    # Running logs with -t adds a timestamp, this might feel redundant with the timestamp provided
    # by directly jahia but this allows for easy comparison between various containers that might
    # have their timezone set differently
    - name: Export containers logs
      shell: bash
      if: always()
      run: |
        cd ${{ inputs.tests_path }}
        . ./set-env.sh
        docker-compose logs -t --tail="all" > ./artifacts/results/all-containers.log
        docker logs jahia > ./artifacts/results/jahia.log
        docker logs ${{ inputs.tests_container_name }} > ./artifacts/results/${{ inputs.tests_container_name }}.log
        cp ./artifacts/docker.log ./artifacts/results/

    - name: Analyze Test results
      shell: bash
      if: always()
      run: |
        cd ${{ inputs.tests_path }}
        if [[ ! -e ./artifacts/results/test_success ]]; then
          echo "More than one failure found, sending exit signal"
          exit 1
        fi

    # If a ci.postrun.sh script is present, this script is executed
    # The main purpose of this script is to export additional artifacts,
    # capture logs from other containers, ...    
    - name: Execute Postrun script is present
      shell: bash
      if: always()
      run: |
        cd ${{ inputs.tests_path }}
        export DOCKER_CLIENT_TIMEOUT=120
        export COMPOSE_HTTP_TIMEOUT=120
        . ./set-env.sh
        if [[ -f "${{ inputs.ci_postrun_script }}" ]]; then
          echo "Postrun script is present"
          bash ${{ inputs.ci_postrun_script }}
        fi

    # Once all is executed, results are submitted to external platforms
    # Testrail report and Slack (failure only) notifications are sent during scheduled executions or merged into the main branch 
    - name: Publish results to testrail
      shell: bash
      if: always()
      run: |
        if [ ${{ inputs.should_skip_testrail }} == false ] || [ ${{ inputs.primary_release_branch }} == $GITHUB_REF ]; then
          cd ${{ inputs.tests_path }}
          jahia-reporter testrail \
            --testrailUsername="${{ inputs.testrail_username }}" \
            --testrailPassword="${{ inputs.testrail_password }}" \
            --sourcePath="artifacts/results/xml_reports" \
            --sourceType="xml" \
            --projectName="${{ inputs.testrail_project }}" \
            --milestone="${{ inputs.testrail_milestone }}" \
            --defaultRunDescription="This test was executed on Github Actions, $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
        fi

    # See https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication for Google Auth setup
    - name: Create incident in PagerDuty
      shell: bash 
      if: failure()
      run: |
        if [ ${{ inputs.primary_release_branch }} == $GITHUB_REF ] || [ master == $GITHUB_REF ]; then
          cd ${{ inputs.tests_path }}
          jahia-reporter pagerduty:incident \
            --sourcePath="artifacts/results/xml_reports" \
            --sourceType="xml" \
            --pdApiKey="${{ inputs.incident_pagerduty_api_key }}" \
            --pdReporterEmail="${{ inputs.incident_pagerduty_reporter_email }}" \
            --pdReporterId="${{ inputs.incident_pagerduty_reporter_id }}" \
            --pdTwoStepsAssign \
            --googleSpreadsheetId="${{ inputs.incident_google_spreadsheet_id }}" \
            --googleClientEmail="${{ inputs.incident_google_client_email }}" \
            --googleApiKey="${{ inputs.incident_google_api_key_base64 }}" \
            --service="${{ inputs.module_id }}" \
            --sourceUrl=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID
        fi  

    - name: Send Notifications to Slack
      shell: bash 
      if: always()
      run: |
        if [ ${{ inputs.should_skip_notifications }} == false ] || [ ${{ inputs.primary_release_branch }} == $GITHUB_REF ]; then
          cd ${{ inputs.tests_path }}
          jahia-reporter slack \
            --channelId="${{ inputs.slack_channel_id_notifications }}" \
            --channelAllId="${{ inputs.slack_channel_id_notifications_all }}" \
            --token="${{ inputs.slack_client_token }}" \
            --skipSuccessful \
            --sourcePath="artifacts/results/xml_reports" \
            --sourceType="xml" \
            --moduleFilepath="artifacts/results/installed-jahia-modules.json" \
            --msgAuthor="Github Actions ($GITHUB_REPOSITORY)" \
            --runUrl=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID
        fi 

    - name: Send Test data to https://zencrepes.jahia.com
      shell: bash
      if: always()
      run: |
        if [ ${{ inputs.should_skip_zencrepes }} == false ] || [ ${{ inputs.primary_release_branch }} == $GITHUB_REF ]; then
          cd ${{ inputs.tests_path }}
          jahia-reporter zencrepes \
            --webhook="https://zencrepes.jahia.com/zqueue/testing/webhook" \
            --webhookSecret="${{ inputs.zencrepes_secret }}" \
            --sourcePath="artifacts/results/xml_reports" \
            --sourceType="xml" \
            --moduleFilepath="artifacts/results/installed-jahia-modules.json" \
            --name="${{ inputs.module_id }}" \
            --runUrl=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID
        fi

    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v2
      if: always()
      with:
        report_paths: '${{ inputs.tests_path }}artifacts/results/xml_reports/**/*.xml'

    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: integration-tests-results
        path: ${{ inputs.tests_path }}artifacts/results/
        retention-days: 7

    - name: Keep session opened if a particular file is present
      shell: bash
      if: always()
      run: |
          WAIT_DURATION=0
          while [[ -e /tmp/debug ]]; do
            echo "Debug file present - $(( ++ WAIT_DURATION ))s - waiting for file removal..."
            if [ $WAIT_DURATION -gt ${{ inputs.debug_session_timeout }} ]; then
              echo "Reached timeout of: ${{ inputs.debug_session_timeout }}"
              echo "Exiting the loop"
              break
            fi
            sleep 1;
          done
